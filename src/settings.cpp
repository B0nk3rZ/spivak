/**************************************************************************
 *  Spivak Karaoke PLayer - a free, cross-platform desktop karaoke player *
 *  Copyright (C) 2015-2016 George Yunaev, support@ulduzsoft.com          *
 *                                                                        *
 *  This program is free software: you can redistribute it and/or modify  *
 *  it under the terms of the GNU General Public License as published by  *
 *  the Free Software Foundation, either version 3 of the License, or     *
 *  (at your option) any later version.                                   *
 *																	      *
 *  This program is distributed in the hope that it will be useful,       *
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *  GNU General Public License for more details.                          *
 *                                                                        *
 *  You should have received a copy of the GNU General Public License     *
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>. *
 **************************************************************************/

#include <QDir>
#include <QString>
#include <QStringList>
#include <QFileInfo>
#include <QJsonDocument>
#include <QJsonObject>
#include <QJsonArray>
#include <QSaveFile>
#include <QStandardPaths>
#include <QSslCertificate>
#include <QSslError>

#include "util.h"
#include "settings.h"
#include "logger.h"

Settings * pSettings;


Settings::Settings()
{
    m_appDataPath = QStandardPaths::writableLocation( QStandardPaths::AppDataLocation );
    m_settingsFile = QStandardPaths::writableLocation( QStandardPaths::AppDataLocation ) + QDir::separator() + "config.json";

    if ( m_appDataPath.isEmpty() )
        m_appDataPath = ".";

    if ( !m_appDataPath.endsWith( Util::separator() ) )
        m_appDataPath += Util::separator();

    songdbFilename = m_appDataPath + "karaoke.db";
    queueFilename = m_appDataPath + "queue.dat";

    // Create the application data dir if it doesn't exist
    if ( !QFile::exists( m_appDataPath ) )
    {
        if ( !QDir().mkpath( m_appDataPath ) )
            qCritical("Cannot create application data directory %s", qPrintable(m_appDataPath) );
    }

    // Create the cache data dir if it doesn't exist
    if ( !QFile::exists( QStandardPaths::writableLocation( QStandardPaths::CacheLocation ) ) )
    {
        if ( !QDir().mkpath( QStandardPaths::writableLocation( QStandardPaths::CacheLocation ) ) )
            qCritical("Cannot create application cache directory %s", qPrintable(QStandardPaths::writableLocation( QStandardPaths::AppDataLocation )) );
    }

    load();

    // songPathPrefix should follow directory separator
    if ( !songPathReplacementFrom.isEmpty() && !songPathReplacementFrom.endsWith( Util::separator() ) )
        songPathReplacementFrom.append( Util::separator() );
}

QString Settings::replacePath(const QString &origpath)
{
    if ( songPathReplacementFrom.isEmpty() || !origpath.startsWith( songPathReplacementFrom ) )
        return origpath;

    return songPathReplacementTo + origpath.mid( ( songPathReplacementFrom.length() ) );
}

bool Settings::load()
{
    // Load the settings file
    QFile file(m_settingsFile);

    if ( file.open(QIODevice::ReadOnly ) )
    {
        QByteArray data = file.readAll();

        if ( !data.isEmpty() )
        {
            QJsonDocument document = QJsonDocument::fromJson(data);

            if ( document.isObject() )
            {
                // Parse the settings from JSON
                fromJson( document.object() );
                return true;
            }
        }
    }

    // Use default settings
    fromJson( QJsonObject() );
    return false;
}

bool Settings::save()
{
    // QSaveFile is an I/O device for writing text and binary files, without
    // losing existing data if the writing operation fails.
    QSaveFile file(m_settingsFile);

    if ( !file.open(QIODevice::WriteOnly | QIODevice::Truncate) )
        return false;

    QJsonDocument document( toJson() );

    // QSaveFile will remember the write error happen, so no need to check
    file.write( document.toJson() );
    file.commit();
    return true;
}

QJsonObject Settings::toJson()
{
    QJsonObject out;

    out[ "player/BackgroundType" ] = (int) playerBackgroundType;
    out[ "player/BackgroundObjects" ] = fromStringList( playerBackgroundObjects );
    out[ "player/BackgroundTransitionDelay" ] = (int) playerBackgroundTransitionDelay;
    out[ "player/RenderFPS" ] = playerRenderFPS;

    out[ "player/BackgroundColor" ] = playerBackgroundColor.name();
    out[ "player/LyricsFontString"] = playerLyricsFont.toString();
    out[ "player/LyricsTextBeforeColor"] = playerLyricsTextBeforeColor.name();
    out[ "player/LyricsTextAfterColor"] = playerLyricsTextAfterColor.name();
    out[ "player/LyricsTextSpotColor"] = playerLyricsTextSpotColor.name();
    out[ "player/LyricsTextBackgroundTintPercentage"] = playerLyricBackgroundTintPercentage;
    out[ "player/LyricsFontMaximumSize"] = playerLyricsFontMaxSize;
    out[ "player/LyricsFontFitLines"] = playerLyricsFontFitLines;

    out[ "player/CDGbackgroundTransparent"] = playerCDGbackgroundTransparent;
    out[ "player/IgnoreBackgroundFromFormats"] = playerIgnoreBackgroundFromFormats;
    out[ "player/MusicLyricDelay"] = playerMusicLyricDelay;
    out[ "player/VolumeStep"] = playerVolumeStep;
    out[ "player/UseBuiltinMidiSynth"] = playerUseBuiltinMidiSynth;

    out[ "queue/AddNewSingersNext"] = queueAddNewSingersNext;
    out[ "queue/SaveOnExit"] = queueSaveOnExit;
    out[ "queue/MaxConcurrentPrepare"] = (int) queueMaxConcurrentPrepare;

    out[ "database/PathReplacementPrefixFrom"] = songPathReplacementFrom;
    out[ "database/PathReplacementPrefixTo"] = songPathReplacementTo;

    // LIRC
    out[ "lirc/Enable"] = lircEnabled;
    out[ "lirc/DevicePath"] = lircDevicePath;
    out[ "lirc/MappingFile"] = lircMappingFile;

    // http
    out[ "http/Enabled"] = httpEnabled;
    out[ "http/ListeningPort"] = (int) httpListenPort;
    out[ "http/EnableAddQueue"] = httpEnableAddQueue;

    // Encoding
    out[ "advanced/FallbackEncoding"] = fallbackEncoding;

    // GStreamer path
    if ( !pathGStreamerBinaries.isEmpty() )
        out[ "advanced/gstreamerpath" ] = pathGStreamerBinaries;

    // Those are only set if not empty
    if ( !httpAccessCode.isEmpty() )
        out[ "http/SecureAccessCode"] = httpAccessCode;

    if ( !httpDocumentRoot.isEmpty() )
        out[ "http/DocumentRoot"] = httpDocumentRoot;

    out[ "http/ForceUseHostname"] = httpForceUseHost;

    out[ "misc/DialogAutoCloseTimer" ] = dialogAutoCloseTimer;

    // Music collection
    out[ "musicCollection/Paths"] = fromStringList( musicCollections );
    out[ "musicCollection/SortedOrder"] = musicCollectionSortedOrder;
    out[ "musicCollection/CrossfadeTime"] = musicCollectionCrossfadeTime;

    out[ "mainmenu/StartInFullscreen"] = startInFullscreen;
    out[ "mainmenu/FirstTimeWizardShown"] = firstTimeWizardShown;

    // Notification
    out[ "notification/TopColor"] = notificationTopColor.name();
    out[ "notification/CenterColor"] = notificationCenterColor.name();

    // Custom messages
    out[ "notification/CustomMessage1"] = notificationCustomMessage1;
    out[ "notification/CustomMessage2"] = notificationCustomMessage2;
    out[ "notification/CustomMessage3"] = notificationCustomMessage3;

    // Store the cache dir only if the location is changed (i.e. not standard)
    if ( QStandardPaths::writableLocation( QStandardPaths::CacheLocation ) != cacheDir )
        out[ "player/cacheDir"] = cacheDir;

    if ( !registerCertificate.isEmpty() )
        out["misc/certinfo"] = registerCertificate;

    // Collections
    QJsonArray colarray;

    Q_FOREACH( const CollectionEntry& e, collections )
    {
        colarray.push_back( e.toJson() );
    }

    out[ "collection" ] = colarray;

    return out;
}

void Settings::fromJson(const QJsonObject &data)
{
    playerBackgroundType = (BackgroundType) data.value( "player/BackgroundType" ).toInt( (int)BACKGROUND_TYPE_IMAGE );
    playerBackgroundObjects = toStringList( data.value( "player/BackgroundObjects" ), ":/background" );
    playerBackgroundTransitionDelay = data.value( "player/BackgroundTransitionDelay" ).toInt( 30 );
    playerRenderFPS = data.value( "player/RenderFPS" ).toInt( 25 );
    playerBackgroundColor = QColor( data.value( "player/BackgroundColor" ).toString( "black" ) );
    playerLyricsTextBeforeColor = QColor( data.value( "player/LyricsTextBeforeColor" ).toString( "blue" ) );
    playerLyricsTextAfterColor = QColor( data.value( "player/LyricsTextAfterColor" ).toString("red") );
    playerLyricsTextSpotColor = QColor( data.value( "player/LyricsTextSpotColor" ).toString("yellow") );
    playerCDGbackgroundTransparent = data.value( "player/CDGbackgroundTransparent" ).toBool(false);
    playerMusicLyricDelay = data.value( "player/MusicLyricDelay" ).toInt( 0 );
    playerIgnoreBackgroundFromFormats = data.value( "player/IgnoreBackgroundFromFormats" ).toBool(false);
    playerLyricsFontFitLines = data.value( "player/LyricsFontFitLines").toInt( 4 );
    playerLyricsFontMaxSize = data.value( "player/LyricsFontMaximumSize" ).toInt( 512);
    playerVolumeStep = data.value( "player/VolumeStep").toInt(10);
    playerUseBuiltinMidiSynth = data.value( "player/UseBuiltinMidiSynth" ).toBool( true );
    playerLyricBackgroundTintPercentage = data.value( "player/LyricsTextBackgroundTintPercentage" ).toInt( 75 );

    queueAddNewSingersNext = data.value( "queue/AddNewSingersNext" ).toBool(false);
    queueSaveOnExit = data.value( "queue/SaveOnExit" ).toBool(false);
    queueMaxConcurrentPrepare = data.value( "queue/MaxConcurrentPrepare" ).toInt( 3 );

    songPathReplacementFrom = data.value( "database/PathReplacementPrefixFrom" ).toString();
    songPathReplacementTo = data.value( "database/PathReplacementPrefixTo" ).toString();

    lircDevicePath = data.value( "lirc/DevicePath" ).toString();
    lircMappingFile = data.value( "lirc/MappingFile" ).toString();
    lircEnabled = data.value( "lirc/Enable" ).toBool( false );

    // http
    httpEnabled = data.value( "http/Enabled" ).toBool( false );
    httpListenPort = data.value( "http/ListeningPort" ).toInt( 8000 );
    httpDocumentRoot = data.value( "http/DocumentRoot" ).toString();
    httpEnableAddQueue = data.value( "http/EnableAddQueue" ).toBool( false );
    httpAccessCode = data.value( "http/SecureAccessCode" ).toString();
    httpForceUseHost = data.value( "http/ForceUseHostname" ).toString();

    // Encoding
    fallbackEncoding = data.value( "advanced/FallbackEncoding" ).toString( "UTF-8" );

    startInFullscreen = data.value( "mainmenu/StartInFullscreen" ).toBool( false );
    firstTimeWizardShown = data.value( "mainmenu/FirstTimeWizardShown" ).toBool( false );

    dialogAutoCloseTimer = data.value( "misc/DialogAutoCloseTimer" ).toInt( 10 );

    cacheDir = data.value( "player/cacheDir" ).toString( QStandardPaths::writableLocation( QStandardPaths::CacheLocation ) );

    // Notification
    notificationTopColor = QColor( data.value( "notification/TopColor" ).toString( "white" ) );
    notificationCenterColor = QColor( data.value( "notification/CenterColor" ).toString( "white" ) );
    notificationCustomMessage1 = data.value( "notification/CustomMessage1" ).toString();
    notificationCustomMessage2 = data.value( "notification/CustomMessage2" ).toString();
    notificationCustomMessage3 = data.value( "notification/CustomMessage3" ).toString();

    // Music collection
    musicCollections = toStringList( data.value( "musicCollection/Paths" ) );
    musicCollectionSortedOrder = data.value( "musicCollection/SortedOrder" ).toBool( true );
    musicCollectionCrossfadeTime = data.value( "musicCollection/CrossfadeTime" ).toInt( 5 );

    // Special handling for the font which was stored as player/LyricsFont and now player/LyricsFontString
    if ( data.contains( "player/LyricsFontString" ) )
        playerLyricsFont.fromString( data.value( "player/LyricsFontString" ).toString() );
    else
        playerLyricsFont = QFont( data.value( "player/LyricsFont" ).toString( "arial" ) );

    // GStreamer path
    if ( data.contains( "advanced/gstreamerpath" ) )
        pathGStreamerBinaries = data.value( "advanced/gstreamerpath" ).toString();

    // Registration info
    if ( data.contains( "misc/certinfo" ) )
        validateCert( data.value( "misc/certinfo" ).toString() );

    // Collections
    collections.clear();
    QJsonArray colarray = data.value("collection").toArray();

    for( const QJsonValue& v : colarray )
    {
        CollectionEntry entry;
        entry.fromJson( v.toObject() );
        collections[ entry.id ] = entry;
    }
}

QJsonValue Settings::fromStringList(const QStringList &list)
{
    if ( list.isEmpty() )
        return QString();

    return list.join( "|" );
}

QStringList Settings::toStringList( const QJsonValue& value, const QString& defaultval )
{
    QString listvalue = value.toString( defaultval );

    if ( listvalue.isEmpty() )
        return QStringList();

    return listvalue.split( "|" );
}

QString Settings::validateCert(const QString &pemdata)
{
    static unsigned char cacert_der[] = {
      0x30, 0x82, 0x05, 0x8b, 0x30, 0x82, 0x03, 0x73, 0xa0, 0x03, 0x02, 0x01,
      0x02, 0x02, 0x14, 0x74, 0x87, 0xf4, 0xe1, 0x17, 0x85, 0x13, 0xbc, 0x94,
      0x10, 0x5e, 0x8c, 0xda, 0x20, 0x0a, 0x4b, 0xb6, 0x0f, 0x54, 0xd8, 0x30,
      0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b,
      0x05, 0x00, 0x30, 0x67, 0x31, 0x1d, 0x30, 0x1b, 0x06, 0x03, 0x55, 0x04,
      0x03, 0x0c, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x75, 0x6c, 0x64, 0x75, 0x7a,
      0x73, 0x6f, 0x66, 0x74, 0x2e, 0x73, 0x70, 0x69, 0x76, 0x61, 0x6b, 0x31,
      0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04, 0x08, 0x0c, 0x0a, 0x43, 0x61,
      0x6c, 0x69, 0x66, 0x6f, 0x72, 0x6e, 0x69, 0x61, 0x31, 0x0b, 0x30, 0x09,
      0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x24, 0x30,
      0x22, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x09, 0x01,
      0x16, 0x15, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x40, 0x75, 0x6c,
      0x64, 0x75, 0x7a, 0x73, 0x6f, 0x66, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x30,
      0x1e, 0x17, 0x0d, 0x32, 0x35, 0x30, 0x31, 0x30, 0x32, 0x32, 0x33, 0x33,
      0x38, 0x32, 0x39, 0x5a, 0x17, 0x0d, 0x34, 0x34, 0x31, 0x32, 0x32, 0x38,
      0x32, 0x33, 0x33, 0x38, 0x32, 0x39, 0x5a, 0x30, 0x67, 0x31, 0x1d, 0x30,
      0x1b, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x14, 0x63, 0x6f, 0x6d, 0x2e,
      0x75, 0x6c, 0x64, 0x75, 0x7a, 0x73, 0x6f, 0x66, 0x74, 0x2e, 0x73, 0x70,
      0x69, 0x76, 0x61, 0x6b, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04,
      0x08, 0x0c, 0x0a, 0x43, 0x61, 0x6c, 0x69, 0x66, 0x6f, 0x72, 0x6e, 0x69,
      0x61, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02,
      0x55, 0x53, 0x31, 0x24, 0x30, 0x22, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86,
      0xf7, 0x0d, 0x01, 0x09, 0x01, 0x16, 0x15, 0x73, 0x75, 0x70, 0x70, 0x6f,
      0x72, 0x74, 0x40, 0x75, 0x6c, 0x64, 0x75, 0x7a, 0x73, 0x6f, 0x66, 0x74,
      0x2e, 0x63, 0x6f, 0x6d, 0x30, 0x82, 0x02, 0x22, 0x30, 0x0d, 0x06, 0x09,
      0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03,
      0x82, 0x02, 0x0f, 0x00, 0x30, 0x82, 0x02, 0x0a, 0x02, 0x82, 0x02, 0x01,
      0x00, 0x92, 0xeb, 0xd4, 0x68, 0x47, 0x52, 0x9f, 0xdb, 0x46, 0x73, 0x6c,
      0x1f, 0x4f, 0xdc, 0x20, 0x24, 0x83, 0xdc, 0xe8, 0x37, 0x27, 0x27, 0x19,
      0x1d, 0x61, 0xe0, 0x63, 0x87, 0xf2, 0x42, 0x4b, 0x0b, 0x7c, 0x81, 0xe8,
      0xf2, 0x90, 0x8f, 0x48, 0x53, 0x2c, 0x5d, 0x08, 0xb5, 0x7a, 0xc4, 0xfd,
      0xb1, 0x9a, 0x46, 0x1c, 0xd8, 0x65, 0xc5, 0xfc, 0xfc, 0x3c, 0x94, 0xb0,
      0xf2, 0xe3, 0xa5, 0x84, 0x5e, 0x70, 0x22, 0xac, 0x85, 0xa7, 0xa0, 0x27,
      0x00, 0x98, 0x60, 0x79, 0xb3, 0x8d, 0x12, 0xd7, 0x4c, 0x71, 0x8f, 0x1b,
      0x37, 0x14, 0x06, 0xc2, 0x43, 0xa9, 0x2c, 0xc9, 0x2a, 0x34, 0x67, 0xa9,
      0xde, 0xc2, 0x4f, 0xf5, 0x09, 0xe6, 0xd3, 0x2a, 0x3d, 0x18, 0x9c, 0x9b,
      0xd1, 0x44, 0x62, 0xe2, 0x3e, 0x39, 0x5d, 0xdf, 0x5d, 0x0f, 0x76, 0xb1,
      0xaa, 0xdf, 0x25, 0x64, 0xfb, 0xc4, 0xce, 0x77, 0x31, 0x83, 0xc2, 0xb6,
      0xea, 0x4a, 0xb0, 0x36, 0x75, 0xaf, 0xdf, 0x2c, 0x6f, 0x89, 0xd8, 0x6d,
      0xbf, 0xe3, 0x5b, 0x44, 0x9f, 0x51, 0x8c, 0x41, 0xc7, 0xd8, 0x9b, 0x02,
      0xbf, 0x27, 0xba, 0xb9, 0x1d, 0xa1, 0xac, 0xbe, 0x8c, 0x86, 0x94, 0x05,
      0x21, 0x54, 0x6a, 0x17, 0x06, 0xe1, 0x00, 0x77, 0xb9, 0x38, 0xbe, 0x37,
      0x6a, 0x77, 0xae, 0x0a, 0x8e, 0xff, 0xf3, 0x82, 0xcd, 0x31, 0x53, 0xd5,
      0x6a, 0xc5, 0x5e, 0x9f, 0x75, 0x77, 0x26, 0xf3, 0x07, 0x7d, 0x26, 0xbc,
      0x5b, 0xf2, 0x72, 0x6e, 0xb3, 0xa0, 0x2b, 0x3a, 0x8e, 0x08, 0xd3, 0xe0,
      0xd0, 0x3b, 0x1b, 0xf5, 0x5e, 0xdc, 0x60, 0x31, 0x09, 0x32, 0xcf, 0xd8,
      0xf3, 0x36, 0xa5, 0x90, 0xa9, 0x92, 0x47, 0x2c, 0xf0, 0x2b, 0xd7, 0x7a,
      0x1b, 0x35, 0xc0, 0x9d, 0xea, 0x89, 0x9f, 0x1c, 0xf4, 0xe7, 0x6e, 0xb6,
      0xab, 0x65, 0xe6, 0x36, 0x9c, 0x5a, 0x05, 0xde, 0x79, 0xd1, 0x85, 0x88,
      0xb5, 0x04, 0x69, 0x67, 0xf6, 0xf0, 0x4b, 0xa8, 0xa4, 0x0c, 0x9d, 0xaf,
      0x11, 0x7b, 0x4e, 0xc3, 0xa6, 0xb0, 0x69, 0x06, 0x97, 0x49, 0x8d, 0xb7,
      0xf8, 0xf6, 0xec, 0xb1, 0x1a, 0x31, 0x89, 0xc9, 0x7d, 0xe7, 0xc9, 0xa5,
      0x89, 0x81, 0xbd, 0xf5, 0x20, 0x80, 0x14, 0x7c, 0xe7, 0x48, 0x06, 0x4e,
      0xbe, 0xa9, 0x5c, 0x2b, 0x20, 0x03, 0x17, 0x4e, 0x78, 0x27, 0x7e, 0xfe,
      0x5f, 0x83, 0x51, 0x71, 0x75, 0xde, 0x7e, 0x29, 0xcd, 0x9a, 0x54, 0x27,
      0x98, 0x78, 0x7a, 0xed, 0x33, 0xd5, 0xb6, 0xa2, 0x17, 0xa4, 0xbe, 0xb9,
      0x53, 0x57, 0x5c, 0xc8, 0x32, 0xd6, 0xad, 0x09, 0x19, 0xc1, 0x38, 0xaa,
      0x97, 0x38, 0x82, 0x8c, 0x71, 0xcc, 0x16, 0x42, 0x6b, 0xc5, 0x17, 0x9e,
      0xec, 0x04, 0x64, 0x1f, 0x7b, 0x75, 0x14, 0x7f, 0x4d, 0x06, 0x90, 0xe1,
      0xfa, 0x79, 0x32, 0xdd, 0x46, 0x1e, 0x92, 0x4a, 0x15, 0x3a, 0xc5, 0x7b,
      0xfe, 0x04, 0x69, 0x40, 0xe7, 0xb2, 0x9f, 0x17, 0xff, 0xc0, 0xae, 0x1f,
      0xb2, 0xc0, 0x4f, 0x70, 0x87, 0x35, 0x6d, 0x5f, 0x5a, 0xda, 0x9e, 0xb8,
      0x1e, 0x16, 0x9a, 0xd5, 0xfc, 0x77, 0xa3, 0x48, 0x03, 0x6f, 0x13, 0x70,
      0x7d, 0x50, 0xdb, 0xe1, 0x7d, 0x6f, 0x97, 0x79, 0x87, 0x77, 0xe9, 0x74,
      0xd3, 0x79, 0xe0, 0xa9, 0xb7, 0x1f, 0x6e, 0x39, 0xed, 0x9b, 0xbc, 0x51,
      0x48, 0x07, 0x66, 0x15, 0xd9, 0x52, 0x7b, 0x76, 0xb9, 0x36, 0x47, 0xf6,
      0x16, 0x53, 0xb9, 0x5f, 0x48, 0x42, 0xe9, 0x7e, 0xb0, 0x55, 0x6e, 0xdf,
      0x84, 0x35, 0xf4, 0x93, 0x76, 0xfa, 0x0f, 0x82, 0x73, 0x4c, 0x0c, 0xbc,
      0x58, 0xfa, 0x71, 0x79, 0xf3, 0xc1, 0xe3, 0x58, 0x94, 0x4b, 0x63, 0x8f,
      0x7b, 0xe2, 0x1d, 0x45, 0xbd, 0x7d, 0xcb, 0xf0, 0xa7, 0x02, 0x03, 0x01,
      0x00, 0x01, 0xa3, 0x2f, 0x30, 0x2d, 0x30, 0x0c, 0x06, 0x03, 0x55, 0x1d,
      0x13, 0x04, 0x05, 0x30, 0x03, 0x01, 0x01, 0xff, 0x30, 0x1d, 0x06, 0x03,
      0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x33, 0xc8, 0x02, 0x0b, 0xa6,
      0xba, 0xb4, 0xbf, 0x2e, 0xb6, 0xb2, 0x0e, 0xdc, 0xfb, 0x5e, 0x4d, 0x0c,
      0x2f, 0x7f, 0x03, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7,
      0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x03, 0x82, 0x02, 0x01, 0x00, 0x45,
      0x1b, 0xb2, 0xf0, 0x98, 0xe4, 0x2a, 0xae, 0x55, 0xe2, 0x64, 0xc6, 0x38,
      0x5b, 0xee, 0x9b, 0xff, 0x3a, 0x72, 0xb6, 0xb4, 0x88, 0xf1, 0xc8, 0x34,
      0x84, 0x5d, 0xe8, 0xca, 0x71, 0x66, 0x34, 0xd8, 0x3a, 0x5c, 0xca, 0x6f,
      0xc0, 0xaf, 0xcd, 0x7a, 0xe6, 0x7e, 0x86, 0x44, 0x05, 0x68, 0x06, 0xba,
      0xf6, 0x42, 0x5b, 0x5e, 0xae, 0x68, 0x54, 0x88, 0x66, 0xc6, 0xb7, 0xb3,
      0x00, 0xb7, 0xcf, 0x0e, 0xaa, 0xb7, 0x23, 0x02, 0xfe, 0xef, 0x0b, 0x3d,
      0xeb, 0xc6, 0x31, 0x28, 0xee, 0x2c, 0x42, 0x23, 0xcc, 0x5d, 0xa9, 0x3e,
      0xc3, 0x09, 0x00, 0x22, 0x08, 0x83, 0x79, 0xb8, 0x66, 0xa3, 0x5c, 0x83,
      0xfc, 0x00, 0xea, 0xe7, 0x9c, 0x7b, 0xd8, 0x11, 0x5a, 0x4a, 0x08, 0xbd,
      0x3a, 0xbf, 0x1f, 0xc6, 0xd6, 0x31, 0x2e, 0xe7, 0x4f, 0x3f, 0x31, 0x52,
      0x5c, 0xd3, 0x05, 0x83, 0xc4, 0x6d, 0xd7, 0x8d, 0x04, 0x32, 0xca, 0x73,
      0x24, 0x26, 0xf5, 0xa4, 0x96, 0x26, 0xe4, 0x28, 0xd5, 0xb8, 0x33, 0xb9,
      0xf3, 0xc7, 0xb7, 0x8d, 0xc2, 0xcb, 0xee, 0x5b, 0x3b, 0x8b, 0x14, 0x66,
      0x7e, 0x8a, 0xf5, 0x11, 0xde, 0x45, 0x9e, 0xc0, 0x76, 0x36, 0x91, 0x13,
      0x60, 0x43, 0xd9, 0x6f, 0x62, 0xae, 0xb6, 0xad, 0xbe, 0xc4, 0x09, 0x35,
      0xe0, 0x9e, 0x11, 0xec, 0x01, 0x83, 0xe7, 0x3f, 0x2e, 0x80, 0x5a, 0xc7,
      0x61, 0x05, 0x46, 0x1e, 0x6c, 0x35, 0xc9, 0xb2, 0x05, 0xa6, 0x0e, 0xc8,
      0xc3, 0xbe, 0x1a, 0xea, 0x60, 0x0b, 0x6f, 0xa2, 0xe9, 0x49, 0xe0, 0x7d,
      0x67, 0x34, 0x4f, 0x91, 0x46, 0x1d, 0x54, 0x64, 0x4e, 0x08, 0xe8, 0x0e,
      0x40, 0x3c, 0x87, 0x9e, 0x21, 0xce, 0x86, 0x7b, 0x1a, 0xc5, 0xa2, 0x3f,
      0xbb, 0xe0, 0x41, 0xbe, 0xd5, 0x32, 0xc5, 0x04, 0x3f, 0xa6, 0x1f, 0xed,
      0xf4, 0x52, 0x1b, 0x9c, 0x28, 0x1e, 0xc6, 0x6b, 0xe7, 0x7a, 0xad, 0x2b,
      0x24, 0x43, 0x7e, 0x3b, 0x53, 0xf6, 0x3b, 0x00, 0x9a, 0x63, 0xd8, 0x3c,
      0x1c, 0x01, 0xaa, 0x70, 0x31, 0x0d, 0x18, 0xa1, 0xc4, 0x32, 0x3a, 0x64,
      0x50, 0x2a, 0x73, 0x4c, 0x98, 0x45, 0x86, 0x4c, 0x3d, 0xc6, 0x2a, 0x70,
      0xac, 0x14, 0x73, 0x94, 0x58, 0xba, 0x8e, 0x66, 0xf4, 0x63, 0x02, 0x7e,
      0xc1, 0xff, 0xa3, 0x41, 0x93, 0x5c, 0x25, 0xd7, 0x63, 0x98, 0x75, 0x41,
      0xb8, 0xd7, 0x0c, 0xe9, 0x1c, 0xbc, 0xde, 0x37, 0x98, 0xe3, 0x7e, 0x95,
      0xb5, 0xcb, 0xf1, 0xa9, 0x66, 0xa5, 0xde, 0x11, 0xb2, 0x63, 0xf2, 0x80,
      0x17, 0x73, 0x59, 0x9c, 0xc7, 0x1d, 0xec, 0x81, 0x47, 0x26, 0x49, 0x9e,
      0x37, 0xab, 0xf8, 0xed, 0x3c, 0x4a, 0xee, 0x26, 0xaf, 0x9a, 0x7b, 0xec,
      0xf7, 0xb2, 0x3d, 0xff, 0x53, 0x7a, 0xf8, 0x04, 0x63, 0x85, 0xb0, 0x6c,
      0xc9, 0x47, 0x5f, 0xda, 0xb7, 0x22, 0x08, 0x49, 0x0c, 0x79, 0x94, 0xc5,
      0xf7, 0xcb, 0x9e, 0x05, 0x41, 0x45, 0xb3, 0x6c, 0xce, 0xd5, 0x61, 0x4a,
      0x9d, 0x4a, 0x81, 0xc7, 0x26, 0x98, 0xcc, 0xf3, 0xb1, 0x85, 0x16, 0x99,
      0x71, 0xfd, 0xa2, 0xa6, 0x34, 0xff, 0x4e, 0x0c, 0x14, 0x0f, 0x9a, 0x2b,
      0x38, 0xeb, 0x20, 0x8d, 0xcb, 0xeb, 0xca, 0x8e, 0x2d, 0xe6, 0xb6, 0x92,
      0x2d, 0x44, 0xe7, 0xd0, 0x2c, 0x3c, 0x5f, 0x55, 0x9a, 0x46, 0xdd, 0xdc,
      0x8c, 0x00, 0x81, 0xb4, 0xd9, 0x31, 0x50, 0xda, 0xf8, 0xe1, 0xae, 0x20,
      0xca, 0x24, 0x68, 0x41, 0x17, 0x17, 0x17, 0xc4, 0xa4, 0x4b, 0x46, 0xf2,
      0x2e, 0xbb, 0xcb, 0xd7, 0x8c, 0xb2, 0xbb, 0x14, 0x35, 0x0d, 0xa9, 0xc3,
      0xfb, 0x35, 0xef, 0xe5, 0x68, 0x63, 0xb7, 0x8b, 0x5a, 0x93, 0x34, 0x0a,
      0x53, 0x7e, 0xd7, 0xdd, 0x80, 0x7b, 0xba
    };

    registeredName.clear();
    registerCertificate.clear();
    registeredUntil = QDateTime();
    registeredDigest.clear();

    QList<QSslCertificate> ca = QSslCertificate::fromData( QByteArray( (char*) cacert_der, 1423), QSsl::Der );
    QList<QSslCertificate> uc = QSslCertificate::fromData( "-----BEGIN CERTIFICATE-----\n" + pemdata.toLatin1() + "\n-----END CERTIFICATE-----");

    if ( ca.length() != 1 || uc.length() != 1 || !uc[0].expiryDate().isValid() )
        return "The license is not valid";

    QList<QSslError> err = QSslCertificate::verify( QList<QSslCertificate> { uc[0], ca[0] } );

    if ( err.length() != 1 || err[0].error() != 10 || err[0].certificate().digest().toHex() != "7c43aa933e91a0ec331258ec28a1572a" )
        return "The license is not valid for this program";

    registeredName = uc[0].subjectDisplayName();
    registeredUntil = uc[0].expiryDate();
    registeredDigest = uc[0].digest().toHex();
    registerCertificate = pemdata;
    save();

    return "";
}

bool Settings::isRegistered() const
{
    return registeredUntil.isValid() && registeredUntil > QDateTime::currentDateTime();
}
